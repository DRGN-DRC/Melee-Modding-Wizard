

		==-----------------------------------==
		   Main Features / Table of Contents
		==-----------------------------------==

		    = Overview
		    = Disc Operations
		    = Test Operations
		    = Code Operations


    >==-------------
    >=- Overview
    >==----------

	Most of the command-line functionality is organized into a few "operation groups", which
	must be specified to access features within them. For example:

		"MMW.exe" disc --discPath [filePath] --info

	In this case, "disc" is the operation group name. Here is a short description of each group 
	and the operations/arguments within them. Other switches that are specific to one of these 
	features are not included here. See the sections below for more detail on a specifc operation.
	Details for specific op groups can also be viewed using the command "MMW.exe [opGroup] -h".

	You may use the full argument name, e.g. "--build", or a shorthand version of it, shown in
	parenthesis below (e.g. "-b" instead of "--build").

	    = Disc Operations
		--build (-b)		Build a disc from extracted root files
		--export (-e)		Export files from a disc
		--import (-i)		Import files to a disc
		--listFiles (-l)	List all files in a disc
		--info (-n)		Show information on a given disc

	    = Test Operations
		--boot			Boot test a given stage/character in Dolphin
		--validate		Test whether files are of an expected type

  WIP!	    = Code Operations
		--install		Install a list of given mods
		--library		Specify the library to install from (if not using default)


	These arguments do not require an operation group:

		--help (-h)		Show the program's help message and exit
		--version (-v)		Show program's version number and exit


    >==------------------------------------------------------
    >=- OpGroup: "disc" (Disc and Root Folder Operations)
    >==---------------------------------------------------

	--build (-b) ROOTFOLDERPATH
		Builds a disc file (ISO or GCM) from a given root folder path. The folder should 
		contain a "sys" folder, and optionally a "files" folder (or else files will be taken 
		from the same root folder). The disc will be built in the root path given, unless 
		the --output option is also provided.

	--discPath (-d) DISCPATH
		Provide a filepath for a target disc for the program to operate on. This is required 
		for most of the disc operations (those that say they operate on a "given disc").

	--export (-e) ISOPATH [ISOPATH ...]
		Export one or more files from a given disc. Use an ISO path to target a specific 
		file within the disc: 'e.g. "--export PlSsNr.dat" or "--export ./audio/us/mario.ssm"
		If operating on multiple files, this should be a list of ISO paths (separated by 
		spaces). If the --output command is not also used, files are output to the current 
		working directory.'

	--import (-i) FILEPATH [FILEPATH ...]
		Provide one or more filepaths for external/standalone files to be imported into a 
		given disc. Supplement this with the --isoPath (-p) command to define what file(s) in 
		the disc to replace. The given filepath may be a single path, or a list of paths for 
		multiple files (separated by spaces). If operating on multiple files, the list of paths 
		should be in the same order as those in the --isoPath argument.

	--listFiles (-l)
		List the files within a given disc. May be used with --info.

	--info (-n)
		Show various information on a given disc. May be used with --listFiles.

	--no-backup-on-rebuild (-nbu)
		Do not back up (create a copy of) the disc in cases where it needs to be rebuilt. 
		Instead, the original disc will be replaced by a new file by the same name.

	--output (-o) OUTPUTFILEPATH
		Provides an output path for various operations. May be just a folder path, or it 
		may include the file name in order to name the finished file.

	--isoPath (-p) ISOPATH [ISOPATH ...]
		Used to target one or more specific files within a disc. e.g. "PlSsNr.dat" or 
		"./audio/us/mario.ssm". If operating on multiple files, this should be a list of ISO 
		paths (separated by spaces).


    >==--------------------------------------
    >=- OpGroup: "test" (Test Operations)
    >==-----------------------------------

	--boot (-b) [		Input: Single file path
		If you use this command with a stage or character file, that file will be loaded 
		into a mostly-vanilla mini disc, and loaded in the Dolphin instance you've provided. 
		The game will be booted directly into a match with the given stage or character 
		for immediate testing.
	--debug (-d)		Flag
		Use this flag to run Dolphin in Debug Mode when using the --boot command above.

	--validate (-v)		Input: One or more file paths (space-separated)
		Validate files to determine if they are of an expected type. By default, this will 
		attempt to validate them as "dat" files, however you may change this using the 
		--validationType command to be more specific. You may pass one or more file paths to 
		this command. Or you may instead provide a JSON file or JSON-formatted string for input.

		For example:
			MMW.exe test --validate "C:\\TestFiles\\PlCaNr.dat"
				or
			MMW.exe test --validate "C:\\TestFiles\\PlCaNr.dat" "C:\\TestFiles\\PlCa.dat" etc.
				or
			MMW.exe test --validate "C:\\TestFiles\\PlCaNr.dat" --validationType character

		(See the --validationType command below for other possible types.)

		There are two formats you may use for JSON files or the JSON-formatted string:

		1)

		   {
		      "D:\\Tex\\Misc. Textures\\Characters\\Peasent Soldier\\PlFeGr v2.0.dat": "character",
		      "D:\\Tex\\SSBM ISO\\vanilla test iso\\PlCaAJ.dat": "character"
		   }

		or 2)

		   [
		      {
		         "Path": "D:\\Tex\\Misc. Textures\\Characters\\Peasent Soldier\\PlFeGr v2.0.dat",
		         "Expected Type": "stage"
		      },
		      {
		         "Path": "D:\\Tex\\Misc. Textures\\Characters\\Peasent Soldier\\PlFeGr v2.0.dat",
		         "Expected Type": "character"
		      },
		      {
		         "Path": "D:\\Tex\\SSBM ISO\\vanilla test iso\\PlCaAJ.dat",
		         "Expected Type": "character"
		      }
		   ]

		The first form is simpler, but the second form guarantees order is preserved in output 
		and allows for duplicate filepaths (to test the same file for multiple types).

	--validationType (-vt)		Input: One or more file types
		Provide the expected file type(s) for the --validate command. If only one type is given,
		all of the given paths will be expected to be that type. Or you may provide a list of 
		types; one for each file path given. The default if this command is not used is "dat". 
		Other allowable validation types are "music", "menu", "stage", and "character". This 
		option is ignored when using JSON input.

	--outputJsonFile (-ojf)		Input: Single file path
		Provide a filepath to output a JSON results file for the --validate command.

	--outputJsonString (-ojs)	Flag
		Output JSON results on stdout as a string when using the --validate command. 
		Usage of this option will disable the normal file status printout.
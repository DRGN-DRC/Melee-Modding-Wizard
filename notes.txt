
	char search

80085820 000000c4 80085820 0 loadFile_CharCostumeDat
800855c8 00000164 800855c8 0 Load_CharID->FileNames


801b06b0 00000080 801b06b0 0 CSS_Restore1PlayerCharChoices+CSSType(r3=,r4=CSSType,r5=ExtCharID,r6=,r7=CostumeID,r8=,r9=,r10=PlayerWhoAccessedCSS)
801b0730 00000084 801b0730 0 CSS_SaveHMNCharChoices(r3=CSSData,r4=StoreCharacter,r5=Store?,r6=StoreCostume,r7=StoreNametag,r8=Store?)
801b07b4 00000034 801b07b4 0 CSS_RestoreCPUCharChoices(r3=CSSData,r4=CharID,r5=Unk,r6=CostumeID,r7=NametagID,r8=Unk,r9=PlayerWhoAccessedCSS)
801b07e8 00000094 801b07e8 0 CSS_SaveCPUCharacterChoices(r3=CSSData,r4=StoreCharacter,r5=Store?,r6=StoreCostume,r7=StoreNametag,r8=Store?)

8025d5ac 000004f4 8025d5ac 0 CSS_UpdateCostumeTexture(r3=Player,r4=CostumeID,r5=Unk


8025fdec 000002a8 8025fdec 0 CSS_CursorPuck_BtoReturnToLastChar
80260094 0000020c 80260094 0 CSS_CostumeChange
802602a0 000023a8 802602a0 0 CSS_BigFunctionMonitorInputsAndMore
80262648 000008fc 80262648 0 CSS_PuckThink
802626dc 00000868 802626dc 0 CSS_PuckThink
80262f44 00000410 80262f44 0 CSS_LoadButtonInputs
802633b0 00000cc0 802633b0 0 CSS_NametagRectangleThink

80264070 0000000c 80264070 0 zz_0264070_
8026407c 00000024 8026407c 0 zz_026407c_


	css search

8016795c 000000b8 8016795c 0 CSS_InitializeCSSMatchPlayerInfo
80167b50 00000078 80167b50 0 CSS_InitMajorData
801a5618 00000068 801a5618 0 CSS_InitMinorSceneData

801b14a0 0000003c 801b14a0 0 ScenePrep_VSMode_CSS
801b14dc 00000038 801b14dc 0 SceneDecide_VSMode_CSS

801bed3c 0000006c 801bed3c 0 ScenePrep_HanyuTestCSS
801beda8 000000b0 801beda8 0 SceneDecide_HanyuTestCSS

8025db34 00001358 8025db34 0 CSS_CursorHighlightUpdateCSPInfo (r3=PlayerID)
8025e0ac 00000de0 8025e0ac 0 CSS_CursorHighlightUpdateCSPInfo (r3=PlayerID)


80164250	CheckIfStageIsEnabledInRSS
80236cbc	SubmenuLoad_CSSRules_LoadRandomStageSelect_InitializeSelectedStages

8015eda4	Unlock_GetStageUnlockBitfield
			returns 8045bf2a in r3

	sss

80236cbc 00000754 80236cbc 0 SubmenuLoad_CSSRules_LoadRandomStageSelect_InitializeSelectedStages
80237410 0000008c 80237410 0 CSSRules_LoadRandomStageSelect
804d49ec 00000004 804d49ec 0 Stage_PointerToExternalToInternalIDTable


	OSReport

80394544 00000124 80394544 0 ErrorHandler_PrintOSReport
80393c14 00000118 80393c14 0 OSReport_IncrementCharCount



byte at 803fa2e4
	set by old stage striking code on D-pad up/down press
	not set in v5.0
	read by every frame code @ 80fd07f4 in 4.07++


P1 test:	Bay/Kongo
11100000000000000000000000000110
0xe0000006

P2		Cruise/Japes
11100000000000000011000000000000
0xe0003000

P3		Brinstar/Onett
11100000000000000000001000001000
0xe0000208

P4		Depths/Fourside
11100000001000001000000000000000
0xe0208000



8045C388; random stage select flags from memory card data?
    ^ "current" RSS flags (updated on saving data)


can update 'current' random SSS flags at 8045C388 to update current
random stage selection (for Random Stage Select screen and stage striking code)

803FA1B0: start point for RSS flag storage for other pages
  - accessed 1-indexed (first 4 bytes not used?)
  - P1@ 803FA1B4, P2@ 803FA1B8, P3@ 803FA1BC, P4@ 803FA1C0
  - values updated on SSS change (previously by Every Frame Code)



*********************
* Develop Mode Text *
*********************

Develop mode on-screen text

802269c0 - this function controls the action state text logic (Y+Dpad Down)

80302d4c   DisplayText
r3 = pointer to text data struct start
r4 = pointer to ASCII string (can combine with character identifiers) 
r5 = pointer to first variable string (%s) or int (%d)
r6 = pointer to second variable string (%s) or int (%d)
etc.
f1 = first floating point (%xx.xf)


-----------------

Text_CreateDataTable
inputs:
r3 = ?? normally 6 or 7(byte @ 0x24 of created struct table)
r4 = x-offset (halfword)
r5 = y-offset (halfword)
r6 = max character width of menu (byte)
r7 = max rows (byte)
r8 = pointer, location of ASCII to display on screen

outputs:
r3 = pointer, text data table struct offset

-----------------

Text Data Struct
- check out function 3022
------------
0x00   short   x offset (0=screenleft)
0x02   short   y offset (0=screentop)
0x04   byte    max character width of menu
0x05   byte    max rows
0x06   byte    current character count cursor point (left to right)
0x07   byte    current row cursor point (top to bottom)
0x08   float   width of menu (stretch)
0x0C   float   height of menu (stretch)
0x10   word    background color (box behind letters)
0x14   word    text color
0x24   byte    ?? (usually 0x6 or 0x7)
0x25   byte    text boldness (line size, r3 input to 
0x26   byte     (00000000) = show text and background
		(10) = ?? haven't tried, but saw in code
		(40) = hide background
		(80) = hide text
0x27   byte    text color hue change? 0x00 to 0x03
0x28   point   location of ASCII to display on screen
0x2C   point   previous text structure
0x30   point   next text structure


On-Screen Text Function:

80302638 is the bl to the function that actually shows the text
	r3 = pointer to text struct
8030263C: lwz r31,0x30(r31)	# load the next text struct to display




Text_InitializeSubtext		0x803a6b98



Text_InitializeSubtext		0x803a6754

	r3 - pointer to text struct
	r4 - 
	f1 - X/Y coords
	f2 - background Y





		SIS Notes:

Text_CreateTextStruct(r3=sisId,r4=canvasID)	803a6754
	┕> Text_AllocateTextObject(r3=sisID,r4=TextCanvasID)	803a5acc
	┕> Text_AllocateMenuTextMemory	803a5798
	┕> Text_AllocateMenuTextMemory	803a5798
	┕> Text_CopyPremadeTextDataToStruct(r3=textstruct,r4=textID)	803a6368


canvas is created first; for example:

    #define SIS_ID 0

    // create text canvas
    u16 canvas_id = Text_CreateCanvas(SIS_ID, 0, 7, 8, 128, 1, 128, 0);

    // create text object
    Text *text = Text_CreateText(SIS_ID, canvas_id );		# to add non-premade text?


Text_CreateTextStruct is called on rsss load, as well as the following in Think:


80237410	CSSRules_LoadRandomStageSelect
80236cbc		SubmenuLoad_CSSRules_LoadRandomStageSelect_InitializeSelectedStages


		RandomStageSelect_Think
802359c8		RandomStageSelect_LoadStageText	  <- loops over all stage text to be displayed
803a5acc			Text_AllocateTextObject(r3=sisID,r4=TextCanvasID)
803a6368			Text_CopyPremadeTextDataToStruct(r3=textstruct,r4=textID)



803a62a0	Text_LoadPremadeTextFile(r3=unk, r4=file, r5=symbol)



803a594c 000000e0 803a594c 0 Text_DestroyMenuTextAllocation
803a5a2c 000000a0 803a5a2c 0 Text_DestroyAllMenuTextAllocations		called first on leaving RSSS


80236bc8 - begin text removal loop in RandomStageSelect_Think

803a5cc4	Text_RemoveText
			GObj_RunUserDataRemoveFunc
803a5a2c			Text_DestroyAllMenuTextAllocations
803a594c				Text_DestroyMenuTextAllocation

Text_AllocateTextObject	803a5acc	# to add premade text

	r3: sisID	(sis file ID?)
	r4: TextCanvasID

	f0?
	f1: x offset (origin is screen center)		
	f2: y offset (origin is screen center)
	f3: z offset					4031800000000000	17.5
	f4: 						4064000000000000	160
	f5: 						4072c00000000000	300

	returns textStruct pointer

		col 1 x:	c02a666680000000	-13.200000762939453
		col 2 x: 	3ff3333440000000	1.2000010013580322
		row 1 y:	c0199999a0000000	-6.400000095367432

Text_CopyPremadeTextDataToStruct()

	r3: textStruct pointer
	r4: textID (index into SIS pointer table)



canvasId from 'lbz r4, -0x4AEB (r13)'


new custom injection: 80235c30



r4 values: 8, 9, 0x11, 0xa, 0xc, 6, b, 7, e


SdMenu.1sd @ 0x3E95C0|803EC5C0
	1 @ 0x3E95C7|803EC5C7

stage swap undo flags: 0x3F9250|803FC250

current hacked stage byte: 803FA2E4





struct Text		// size = 0x104?
{
    Vec3 trans;  // 0x0-0xC (x, y, z coords)
    Vec2 aspect; // 0xC-0x14 CHANGE THIS TO BOUND (x, y boundaries)
    int x14;
    int x18;
    int x1c;
    int x20;
    Vec2 scale; // 0x24-0x2C (x, y float sizes)
    int x2C;
    GXColor color; // 0x30
    Vec2 stretch;  // 0x34-0x3C
    int x3c;       // 0x3c
    int x40;       // 0x40
    int x44;       // 0x44
    u8 use_aspect; // 0x48
    u8 kerning;    // 0x49
    u8 align;      // 0x4a
    u8 x4b;
    u8 x4c;
    u8 hidden; // 0x4D
    u8 x4e;
    u8 sis_id; // 0x4F, id of the premade text file to use
    int x50;		      // 0x50, next text struct
    GOBJ *gobj;               // 0x54, pointer to GObj data
    void *callback;           // 0x58, read at 803a878c
    u8 *text_start;           // 0x5C, start parsing text data at this ptr
    u8 *text_end;             // 0x60, stops parsing text data at this ptr
    TextAllocInfo *allocInfo; // 0x64
    void *x68;                // 0x68, some alloc used for dialogue?
    u16 x6c;                  // 0x6c, flags?
    u16 x6e;                  // 0x6e
    int x70;                  // 0x70
    int x74;                  // 0x74
    int x78;                  // 0x78
    int x7c;                  // 0x7c
    int x80;                  // 0x80
    int x84;                  // 0x84
    int x88;                  // 0x88
    int x8c;                  // 0x8c
    int x90;                  // 0x90
    int x94;                  // 0x94
    int char_display_num;     // 0x98, how many characters to display
    u8 is_fit;                // 0x9c
    int x100;                 // 0x100
};


8137cca8

80bd5ca4 80bd5d6c 80bd5e34 80bd5efc
80bd5fc4 80bd608c


new 80bd734c



80236be0	mr	r3, r26






# Reload the scene
li r12,2
lis r11, 0x80479D35+0x10000@h	# 80489D35
stb r12, -0x49F1(r13)		# 804DB6A0 - 0x49f1 = 804D6CAF
stb r12, 0x80479D35-0x10000@l(r11)
# trigger ID (2) is stored in r13 global
# target scene ID + 1 (2) is stored in


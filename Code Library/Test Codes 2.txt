


Uses TEST_Func
[DRGN]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 ----- 0x1234 ------ 00000000 -> Branch

81DE0064 2C0E0002
40820008 4E800020
7C0802A6 00000000
bl <TEST_Func>


	-==-


Example Mod with Configuration Options
Description text goes here.
Configurations:
    float Float Slider = .6; 0-1.0 # You can even set comments
    int32 Int Slider = 42; 0-100 # You can even set comments
    uint32 Object = 0x4 # Select your preferred vegetable features
        0: Point # Optional comment/description
        1: Line
        2: Square
        3: Cube # Another comment
        4: Tesseract
    int16 Some INT16 = 0x16
    int16 Object 2 = 0x2 # Select your preferred vegetable features
        0: Point # Optional comment/description
        1: Line
        2: Square
        3: Cube # Another comment
        4: Tesseract
[??]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x802BD410 --- 7CC83378 -> 390000[[Object 2]]
1.02 ----- 0x8011D090 --- 40820010 -> 48000010


	-==-


testcode
testDesc
[Punkline]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<mytestfunc> ALL
00000000 00000000
00000000 00000000

NTSC 1.02 ---- 0xBF980 ------ 38B80001 -> Branch

lis r0, <<mytestfunc>>@h
ori r4, r0, <<mytestfunc>>@l
80A3000C 7C842A14
00000000


	-==-


Test End File Alignment on Main Menu Load
Tests for alignment error
[Punkline]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ------ 0x1ADF4C ---- 80010024 -> branch

# --- SDATA offsets
r13.xFSTEntries = -0x4424
r13.xFSTPaths   = -0x4420
r13.xFSTCount   = -0x441C
r13.xDVDAsyncQueue = -0x3ea8

# rFST:
FST.xStr    = 0x0
FST.xOffset = 0x4
FST.xSize   = 0x8
FST.size    = 0xC


rFST = 31

lwz r3, r13.xFSTCount(r13)
subi r3, r3, 1
lwz rFST, r13.xFSTEntries(r13)
mulli r3, r3, FST.size
add rFST, rFST, r3
# rFST = last file in FST entries

lwz r3, FST.xSize(rFST)
bl 0x80381fa8  # hsdAllocMemPiece
# allocate space for loading file

lwz r30, 0x24(sp)  # backup sp value for safe return
mr r4, r3                  # r3 = path str
lwz r3, FST.xStr(rFST)     # r4 = file output
addi r5, sp, 0x24          # r5 = temp value to store file size
lwz rFST, r13.xFSTPaths(r13)
add r3, r3, rFST
bl 0x8001668c  # DVD.load
# attempt to load last file in ISO into allocated space

mr r0, r30  # recover last instruction from backup sp value
.long 0     # return from injection
